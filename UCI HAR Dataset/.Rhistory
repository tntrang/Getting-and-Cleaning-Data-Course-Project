}
cacheSolve <- function(x,...) {
inverse_matrix <- x$getinverse()
#print(inverse_matrix)
if(!is.null(inverse_matrix )) {
message("getting cached data")
print(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data,...)
x$setinverse(inverse_matrix)
print('test123')
inverse_matrix
}
test1 <- makeCacheMatrix(matrix(c(4,5,6,9,14,6,7,90,1),nrow=3, ncol=3))
cacheSolve(test1)
cacheSolve(test1)
makeCacheMatrix <- function(x=matrix()) {
inverse_matrix <- NULL
set <- function(y) {
x<<-y
inverse_matrix <<- NULL
}
setinverse <- function(inverse) {inverse_matrix <<- inverse}
get <- function() {
x
}
getinverse <- function() {inverse_matrix}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x,...) {
inverse_matrix <- x$getinverse()
#print(inverse_matrix)
if(!is.null(inverse_matrix )) {
message("getting cached data")
return(inverse_matrix)
}
data <- x$get()
inverse_matrix <- solve(data,...)
x$setinverse(inverse_matrix)
inverse_matrix
}
cacheSolve(test1)
cacheSolve(test1)
test2 <- makeCacheMatrix(matrix(c(4,5,6,10,14,6,7,90,1),nrow=3, ncol=3))
cacheSolve(test2)
library(datasets)
str(airquality)
summary(airquality)
?data.frame
x <- data.frame(1:12, nrow = 3, ncol = 4)
x
class(x)
y <- data.frame(Col1 = rep(3,15), Col2 = rep(NA,14), Col3 = rep(9,15))
y <- data.frame(Col1 = rep(3,15), Col2 = rep(NA,15), Col3 = rep(9,15))
y
?mapply
?apply
tapply(vector, index, function)
tapply
?tapply
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 1:10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
class(table(plants$Active_Growth_Period))
x <- table(plants$Active_Growth_Period)
class(x)
str(plants)
?sample
sample(1:4, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), replace = TRUE), prob = c(0.3,0.7))
flips <- sample(c(0,1), prob = c(0.3, 0.7), replace = TRUE)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
rbinom(n = 100, size 1, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
length(flips2)
sum(flips2)
?rnorm
rnorn(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean = 10)
rpois(5, lamnda = 10)
rpois(5, lambda = 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
quit()
?rnorm
pnorm(0.7, mean = 1, sd =2)
qnorm(3,mean = 1, sd =2)
qnorm(1,mean = 1, sd =2)
qnorm(1)
qnorm(3)
pnorm(0.6, mean=0, sd=1)
pnorm(8, mean=0, sd=1)
pnorm(2, mean=0, sd=1)
?rpois
set.seed(1)
rpois(5, 2)
library("swirl")
swirl()
quit()
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
size(X:size)
select(cran, -5:20)
select(cran, -(5:20))
info()
select(cran, -c(5:20))
cran:-5:20
select(cram, size(-5:20))
select(cran, size(-5:20))
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country == "US" || country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, (size > 100500) AND (r_os == "linux-gnu"))
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrangee(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, id_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size/1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 697)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
letters[1:3]
sample(letters[1:3],1E5, TRUE)
library(swirl)
TNT
swirt()
swirl()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(Cran, ip_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, r_version <= "3.1.1", country =="IN")
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb/ 2^10)
mutate(crant3, correct_size = size+1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
this_day$year
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(28081985)
dmy(25081985)
ymd("192012")
ymd("1920//1//2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 16, minutes = 43, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minute(50)
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- with_tz(mdy("June 17, 2008"), tz = "Singapore")
last_time
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
exit()
quit()
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
library(readr)
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion("dplyr")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
setwd("~/Documents/Data Science Background/RData Science Course/GettingandCleaningData/Week4")
library(stringr)
train_set <- readLines(. /train/"Y_train.txt")
train_set <- readLines(./train/"Y_train.txt")
train_set <- readLines(/train/"Y_train.txt")
train_set <- readLines("/train/Y_train.txt")
train_set <- readLines("train/Y_train.txt")
train_set <- readLines(file.path("train","Y_train.txt"))
train_set <- readLines(file.path("train","Y_train.txt"))
train_set <- readLines(file.path("train","y_train.txt"))
getwd()
setwd("~/Documents/Data Science Background/RData Science Course/GettingandCleaningData/Week4/UCI HAR Dataset")
train_set <- readLines(file.path("train","y_train.txt"))
train_set <- readLines(. /train/"y_train.txt"))
train_set <- readLines(. /train/"y_train.txt")
train_set <- readLines( /train/"y_train.txt")
train_set <- readLines(/train/"y_train.txt")
train_set <- readLines(/"train"/"y_train.txt")
train_set <- readLines(file.path("train","y_train.txt")
train_set <- readLines(file.path("train","y_train.txt"))
head(train_set)
train_set
length(train_set)
ytrain <- readLines(file.path("train","y_train.txt")) #read the train files
xtrain <- readLines(file.path("train","X_train.txt"))
head(xtrain)
length(xtrain)
length(ytrain)
subject <- readLines(file.path("train","subject_train.txt")) #read the subject
length(subject)
dim(xtrain)
head(subject)
head(xtrain)
head(xtrain,1)
ytrain <- as.data.frame(ytrain, header = FALSE, sep = " ",stringsAsFactors=FALSE)
head(ytrain, 1)
ytrain <- readLines(file.path("train","y_train.txt")) #read the train files
ytrain <- as.data.frame(ytrain, header = FALSE, sep = " ",stringsAsFactors=FALSE)
dim(ytrain)
names(ytrain) <- c("Activity Label)
names(ytrain) <- c("Activity Label")
head(ytrain)
ytrain <- as.data.frame(ytrain, header = FALSE, sep = " ",stringsAsFactors=FALSE, colClasses = "character") #convert text file into a data frame
head(ytrain)
subject <- as.data.frame(ytrain, header = FALSE, sep = " ",stringsAsFactors=FALSE, colClasses = "character")
names(subject) <- c("Subject")
head(subject)
xtrain <- as.data.frame(xtrain, header = FALSE, sep = " ", stringsAsFactors = FALSE, colClasses = "numeric")
xtrain[1]
length(xtrain[1])
dim(xtrain)
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= " {1,561}")), stringsAsFactors = FALSE)
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= "{1,561}")), stringsAsFactors = FALSE)
ytrain <- read.table(ytrain, header = FALSE, sep = " ",stringsAsFactors=FALSE, colClasses = "character") #convert text file into a data frame
ytrain[1]
dim(ytrain)
ytrain <- read.table(file = ytrain, header = FALSE, sep = " ",stringsAsFactors=FALSE, colClasses = "character")
ytrain <- read.table(ytrain, header = FALSE, sep = " ",stringsAsFactors=FALSE)
ytrain
ytrain <- read.table("ytrain", header = FALSE, sep = " ",stringsAsFactors=FALSE) #convert text file into a data frame
subject2 <- read.table(file.path("train", "subject_train.txt"), header = FALSE)
dim(subject2)
subject2 <- read.table(file.path("train", "subject_train.txt"), sep= " ", header = FALSE)
dim(subject2)
xtrain2 <- read.table("train/X_train.txt")
xtrain2 <- read.table("train/X_train.txt", header = FALSE)
dim(xtrain2)
{2+3; 4+5}
xtrain <- readLines(file.path("train","X_train.txt"))
{2,10}
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= " {2,10}")), stringsAsFactors = FALSE)
dim(xtrain)
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= " {1,561}")), stringsAsFactors = FALSE)
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= "{2,10}")), stringsAsFactors = FALSE)
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= " {2,20}")), stringsAsFactors = FALSE)
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= " {2,15}")), stringsAsFactors = FALSE)
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= " {2,10}")), stringsAsFactors = FALSE)
xtrain <- readLines(file.path("train","X_train.txt"))
xtrain <- as.data.frame(do.call(rbind, strsplit(xtrain, split= " {2,20}")), stringsAsFactors = FALSE)
dim(xtrain)
download.file("https://raw.githubusercontent.com/fonnesbeck/Bios6301/master/datasets/addr.txt", destfile = "test", method = "curl")
getwd()
url <- "https://raw.githubusercontent.com/fonnesbeck/Bios6301/master/datasets/addr.txt"
download.file(url, destfile = "test", method = "curl")
